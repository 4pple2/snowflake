import streamlit as st
import pandas as pd
from snowflake.snowpark.context import get_active_session
#import sys
import matplotlib.pyplot as plt
import altair as alt
import seaborn as sne

# import plotly.plotly as py - 구 버전 -> 더이상 사용하지 않는다
import plotly.express as px #- express로 대체함
import plotly.graph_objects as go


#
session = get_active_session()
st.set_page_config(layout="wide")
empty1,con1,empty2 = st.columns([0.3,1.0,0.3])

#
def brand_data():
    sql = f"""select "브랜드"
                    ,SUM("입고수량") AS "입고수량"
                    ,SUM("입고원가") AS "입고원가"
                    ,SUM("출고수량") AS "출구수량"
                    ,sum("판매액_한국") AS "판매액_한국"
                    ,SUM("판매액_해외") as "판매액_해외"
                    
                from penta.CJ_TEST."VW_제품_월별판매_아이템"
                GROUP BY "브랜드"
                 ;  
               """
    created_dataframe = session.sql(sql)
    queried_data = created_dataframe.to_pandas()
    return queried_data
def item_data():
    sql = f"""select "브랜드","아이템명"
                    ,SUM("입고수량") AS "입고수량"
                    ,SUM("입고원가") AS "입고원가"
                    ,SUM("출고수량") AS "출구수량"
                    ,sum("판매액_한국") AS "판매액_한국"
                    ,SUM("판매액_해외") as "판매액_해외"
                    
                from penta.CJ_TEST."VW_제품_월별판매_아이템"
                GROUP BY "브랜드","아이템명"
                 ;  
               """
    created_dataframe = session.sql(sql)
    queried_data = created_dataframe.to_pandas()
    
    return queried_data 
def brand_month_data():
    sql = f"""select "브랜드","월"
                    ,SUM("입고수량") AS "입고수량"
                    ,SUM("입고원가") AS "입고원가"
                    ,SUM("출고수량") AS "출구수량"
                    ,sum("판매액_한국") AS "판매액_한국"
                    ,SUM("판매액_해외") as "판매액_해외"
                    
                from penta.CJ_TEST."VW_제품_월별판매_아이템"
                GROUP BY "브랜드","월"

                 ;  
               """
    created_dataframe = session.sql(sql)
    queried_data = created_dataframe.to_pandas()
    
    return queried_data 
    
def year_data():
    sql = f"""select "년"
                    ,SUM("입고수량") AS "입고수량"
                    ,SUM("입고원가") AS "입고원가"
                    ,SUM("출고수량") AS "출구수량"
                    ,SUM("판매액_한국") AS "판매액_한국"
                    ,SUM("판매액_해외") as "판매액_해외"
                    
                from penta.CJ_TEST."VW_제품_월별판매_아이템"
                GROUP BY "년"
                 
                 ;  
               """
    created_dataframe = session.sql(sql)
    queried_data = created_dataframe.to_pandas()
    return queried_data
def month_data():
    sql = f"""select "월"
                    ,SUM("입고수량") AS "입고수량"
                    ,SUM("입고원가") AS "입고원가"
                    ,SUM("출고수량") AS "출구수량"
                    ,SUM("판매액_한국") AS "판매액_한국"
                    ,SUM("판매액_해외") as "판매액_해외"
                    
                from penta.CJ_TEST."VW_제품_월별판매_아이템"
                GROUP BY "월"
                 LIMIT 100
                 ;  
               """
    created_dataframe = session.sql(sql)
    queried_data = created_dataframe.to_pandas()
    
    return queried_data 

    
if __name__ == "__main__":
    
    pdf1 = brand_data()
    pdf_brand_month = brand_month_data()
    pdf_year = year_data()
    pdf_month = month_data()
    pdf_item= item_data()
    
    tab1, tab2,tab3 = st.tabs(['Overview', 'Brand','Chart'])
#### tab1 
    with tab1:
        st.title("개요")
        st.markdown("전체적인 데이터를 보여준다")
        col1,col2,col3,col4 = st.columns(4)
        with col1:
            sql = f"""SELECT SUM("판매액_한국") AS "판매액_한국"
                    FROM penta.CJ_TEST."VW_제품_월별판매_아이템"
                    WHERE "년" = 2020
                    GROUP BY "년"        
                   """
            
            created_dataframe = session.sql(sql)
            queried_data = created_dataframe.to_pandas()
            kr_sales = queried_data['판매액_한국'][0]
            
            # Streamlit에서 텍스트로 표시
            st.subheader(f"**2020 년 한국 매출액** {kr_sales}원")
            
        with col2:
            sql = f"""select SUM("판매액_한국") AS "판매액_한국"
                    from penta.CJ_TEST."VW_제품_월별판매_아이템"
                    where "년" = 2021
                    GROUP BY "년"        
                   """
            created_dataframe = session.sql(sql)
            queried_data = created_dataframe.to_pandas()
            kr_sales = queried_data['판매액_한국'][0]
            
            # Streamlit에서 텍스트로 표시
            st.subheader(f"**2021 년 한국 매출액** {kr_sales}원")
            
        with col3:
            sql = f"""select SUM("판매액_한국") AS "판매액_한국"
                    from penta.CJ_TEST."VW_제품_월별판매_아이템"
                    where "년" = 2022
                    GROUP BY "년"        
                   """
            created_dataframe = session.sql(sql)
            queried_data = created_dataframe.to_pandas()
            kr_sales = queried_data['판매액_한국'][0]
            
            # Streamlit에서 텍스트로 표시
            st.subheader(f"**2022 년 한국 매출액** {kr_sales}원")
        with col4:
            sql = f"""select SUM("판매액_한국") AS "판매액_한국"
                    from penta.CJ_TEST."VW_제품_월별판매_아이템"
                    where "년" = 2023
                    GROUP BY "년"        
                   """
            created_dataframe = session.sql(sql)
            queried_data = created_dataframe.to_pandas()
            kr_sales = queried_data['판매액_한국'][0]
            
            # Streamlit에서 텍스트로 표시
            st.subheader(f"**2023 년 한국 매출액** {kr_sales}원")
            
        st.subheader("년별 매출 변화")
        col4,col5,col6,empty1,empty2 = st.columns([1.2,1.2,1.2,0.3,0.3])
        
        with col4:
            chart = alt.Chart(pdf_year, title='한국 and 해외 판매량 비교').mark_circle().encode(
        	x="판매액_해외:Q", y='판매액_한국:Q'
            ).properties(width=600, height=300)
            
            st.altair_chart(chart, use_container_width=True)
        with empty1:
            st.empty()
        with col5:
            chart = alt.Chart(pdf_year, title='년별 매출 비교').mark_bar().encode(
        	x="년:T", y='판매액_한국:Q'
            ).properties(width=600, height=300)
            
            st.altair_chart(chart, use_container_width=True)
        with empty2:
            st.empty()
        with col6:
            chart = alt.Chart(pdf_month, title='월별 매출 비교').mark_bar().encode(
        	x="월:T", y='판매액_한국:Q'
            ).properties(width=600, height=300)
            
            st.altair_chart(chart, use_container_width=True)
        
####### alt 라이브러리 
    with tab2:
        st.title("Brand Chart Page")
        st.subheader("브랜드 별 매출 데이터")
        st.markdown("파이썬의 외부 라이브러리를 이용해서 PIE차트, 라인차트를 구현 가능하며 칼럼에 한글에 안되던 오류도 해결한다")

        col4,col5,col6,col7,empty3,empty4,empty5 = st.columns([1.2,1.2,1.2,1.2,0.3,0.3,0.3])
        
        with col4:
            chart = alt.Chart(pdf1,title = "브랜드 점유율").mark_arc().encode(
                theta="판매액_한국",
                color="브랜드"
            ).properties(width=600, height=300)
            st.altair_chart(chart, use_container_width=True)
        with empty3:
            st.empty()
        with col5:
            fig2 = px.bar(pdf1, y='판매액_한국', x=['A','I','M','ST','V','W','X'],
	               text_auto=True, title='매출액')
            #fig2.update_traces(textposition='outside', textinfo='percent+label')
            fig2.update_layout(font=dict(size=14),width=300,
                            height=300,margin=dict(l=0, r=0, t=30, b=0))
            
            fig2.update(layout_showlegend=False) # 범례표시 제거
            st.plotly_chart(fig2)
        with empty4:
            st.empty()
        with col6:
            chart = alt.Chart(pdf_brand_month, title='브랜드별 매출 추이').mark_line().encode(
            	x='월', y='판매액_한국',color='브랜드', strokeDash='브랜드'
                ).properties(width=650, height=350)
    
            st.altair_chart(chart, use_container_width=True)
        
        

        with col7:
            chart = alt.Chart(pdf_item, title='일별 매출').mark_bar().encode(
                x='브랜드:N',  # 타입을 'N'으로 지정
                y='판매액_한국:Q',
                color=alt.Color('아이템명:N', legend=None)
            ).properties(width=600, height=350)
            text = alt.Chart(pdf_item).mark_text(dx=0, dy=0, color='black').encode(
                x='브랜드:N',  # 타입을 'N'으로 지정
                y='판매액_한국:Q',
                detail='아이템명:N'  # 타입을 'N'으로 지정
                
            )
            st.altair_chart(chart, use_container_width=True)
    
        
            
            # '브랜드'를 기준으로 묶어서 각 '아이템명'의 일별 판매액 합계를 구합니다.
            area_data = pdf_brand_month.groupby(['브랜드', '월']).sum().reset_index()
            
            # '브랜드'를 기준으로 각 '아이템명'의 일별 매출을 Area Chart로 시각화합니다.
            area_chart = alt.Chart(area_data, title='일별 매출').mark_area().encode(
                x='월:N',
                y='판매액_한국:Q',
                color='브랜드:N'
            ).properties(width=600, height=500)
    
        st.altair_chart(area_chart, use_container_width=True)
####### alt 라이브러리 
    with tab3:
        st.title("Chart Page")
        st.subheader("유형 별 차트 종류에 대해 소개한다.")
        with col1:
            st.metric(label="측정치 1", value=sql)
            st.caption("이는 측정치 1에 대한 추가 정보입니다.")
            fig, ax = plt.subplots()  # 새로운 그림과 축 생성
            ax.scatter(year_data, x= "년," )  # 데이터를 산점도로 플로팅
            st.pyplot(fig)
        
        




            

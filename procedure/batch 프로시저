/*빈 테이블 생성*/
CREATE OR REPLACE TABLE BATCH_TABLE AS (
    SELECT * FROM LOANS_ENRICHED WHERE 1=2);
TRUNCATE BATCH_TABLE;
SELECT * FROM BATCH_TABLE;

-- 배치성 프로시저에서 유의할점 
-----------------------------
-- transaction auto commit이 안되는 dml을 실행할떄는 명시적으로 begin transaction ~ commit으로 해준다
-- 프로시저에서만 사용되는 구문들은 begin transaction 절에 포함시키지 않는다
----------------------------

/*배치성 프로시저 생성*/
CREATE OR REPLACE PROCEDURE BATCH_PROC()
RETURNS VARCHAR
LANGUAGE SQL
AS
$$
DECLARE
    START_TIME TIMESTAMP default CURRENT_TIMESTAMP();
 
BEGIN
    begin transaction;
   call raise('BATCH_PROC START');
    
    DELETE FROM BATCH_TABLE;
    

    CALL RAISE('BATCH_TABLE TRUN 완료');
     
    INSERT INTO BATCH_TABLE
    (
        LOAN_ID
        ,LOAN_AMNT
        ,FUNDED_AMNT
        ,TERM
        ,INT_RATE
        ,INSTALLMENT
        ,GRADE
        ,SUB_GRADE
        ,EMP_TITLE
        ,EMP_LENGTH_YEARS
        ,HOME_OWNERSHIP
        ,ANNUAL_INC
        ,VERIFICATION_STATUS
        ,ISSUE_DATE_PARSED
        ,LOAN_STATUS
        ,PYMNT_PLAN
        ,PURPOSE
        ,TITLE
        ,ZIP_CODE
        ,ADDR_STATE
        ,DTI
        ,DELINQ_2YRS
        ,EARLIEST_CR_LINE
        ,INQ_LAST_6MTHS
        ,MTHS_SINCE_LAST_DELINQ
        ,MTHS_SINCE_LAST_RECORD
        ,OPEN_ACC
        ,REVOL_BAL
        ,REVOL_UTIL
        ,TOTAL_ACC
        ,TOTAL_PYMNT
        ,MTHS_SINCE_LAST_MAJOR_DEROG
        ,TOT_CUR_BAL
        ,ISSUE_MONTH
        ,ISSUE_YEAR)

    SELECT LOAN_ID
,LOAN_AMNT
,FUNDED_AMNT
,TERM
,INT_RATE
,INSTALLMENT
,GRADE
,SUB_GRADE
,EMP_TITLE
,EMP_LENGTH_YEARS
,HOME_OWNERSHIP
,ANNUAL_INC
,VERIFICATION_STATUS
,ISSUE_DATE_PARSED
,LOAN_STATUS
,PYMNT_PLAN
,PURPOSE
,TITLE
,ZIP_CODE
,ADDR_STATE
,DTI
,DELINQ_2YRS
,EARLIEST_CR_LINE
,INQ_LAST_6MTHS
,MTHS_SINCE_LAST_DELINQ
,MTHS_SINCE_LAST_RECORD
,OPEN_ACC
,REVOL_BAL
,REVOL_UTIL
,TOTAL_ACC
,TOTAL_PYMNT
,MTHS_SINCE_LAST_MAJOR_DEROG
,TOT_CUR_BAL
,ISSUE_MONTH
,ISSUE_YEAR 
FROM LOANS_ENRICHED;

CALL RAISE('BATCH_TABLE INSERT 완료');
CALL RAISE('BATCH_PROC END');

CALL result_log('LOAN_BATCH','DAILY_BATCH','TASK1','LOANS_ENRICHED','BATCH_TABLE','DATAIKU', :START_TIME);
commit;
RETURN 'BATCH 성공';

EXCEPTION
  WHEN STATEMENT_ERROR THEN
    RETURN OBJECT_CONSTRUCT('Error type', 'STATEMENT_ERROR',
                            'SQLCODE', SQLCODE,
                            'SQLERRM', SQLERRM,
                            'SQLSTATE', SQLSTATE);
  WHEN EXPRESSION_ERROR THEN
    RETURN OBJECT_CONSTRUCT('Error type', 'EXPRESSION_ERROR',
                            'SQLCODE', SQLCODE,
                            'SQLERRM', SQLERRM,
                            'SQLSTATE', SQLSTATE);
  WHEN OTHER THEN
    RETURN OBJECT_CONSTRUCT('Error type', 'Other error',
                            'SQLCODE', SQLCODE,
                            'SQLERRM', SQLERRM,
                            'SQLSTATE', SQLSTATE);			


END;
$$
;
CALL BATCH_PROC();

SELECT count(*) FROM BATCH_TABLE;

DELETE FROM BATCH_TABLE;
